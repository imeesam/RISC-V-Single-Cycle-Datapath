module alu_decoder (
    input  logic [2:0] funct3,
    input  logic [6:0] funct7,
    input  logic [1:0] aluop,
    output logic [2:0] alucontrol
);

always_comb begin
    case (aluop)
        2'b00: alucontrol = 3'b000; // add (for load/store)
        2'b01: alucontrol = 3'b001; // sub (for branch)
        2'b10: begin                // R-type
            case ({funct7, funct3})
                {7'b0000000, 3'b000}: alucontrol = 3'b000; // ADD
                {7'b0100000, 3'b000}: alucontrol = 3'b001; // SUB
                {7'b0000000, 3'b111}: alucontrol = 3'b010; // AND
                {7'b0000000, 3'b110}: alucontrol = 3'b011; // OR
                {7'b0000000, 3'b100}: alucontrol = 3'b100; // XOR
                {7'b0000000, 3'b010}: alucontrol = 3'b101; // SLT
                default: alucontrol = 3'b000;
            endcase
        end
        2'b11: begin                // I-type immediate ALU ops
            case (funct3)
                3'b000: alucontrol = 3'b000; // ADDI
                3'b111: alucontrol = 3'b010; // ANDI
                3'b110: alucontrol = 3'b011; // ORI
                default: alucontrol = 3'b000;
            endcase
        end
        default: alucontrol = 3'b000;
    endcase
end

endmodule
