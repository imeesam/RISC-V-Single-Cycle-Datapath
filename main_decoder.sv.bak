module main_decoder(
    input  logic [6:0] opcode,
    output logic       branch,
    output logic       jump,
    output logic       alusrc,
    output logic       rw,      // register write
    output logic       mw,      // memory write
    output logic [2:0] immsrc,  // immediate type
    output logic [1:0] aluop    // ALU operation control
);

always_comb begin
    // Default values
    branch = 0;
    jump   = 0;
    alusrc = 0;
    rw     = 0;
    mw     = 0;
    immsrc = 3'b000;
    aluop  = 2'b00;

    case (opcode)
        7'b0110011: begin // R-type
            alusrc = 0;
            rw     = 1;
            aluop  = 2'b10;
        end

        7'b0010011: begin // I-type (e.g., addi, andi)
            alusrc = 1;
            rw     = 1;
            immsrc = 3'b000; // I-type immediate
            aluop  = 2'b11;
        end

        7'b0000011: begin // Load (lw)
            alusrc = 1;
            rw     = 1;
            immsrc = 3'b000; // I-type imm
            aluop  = 2'b00;
        end

        7'b0100011: begin // Store (sw)
            alusrc = 1;
            mw     = 1;
            immsrc = 3'b001; // S-type imm
            aluop  = 2'b00;
        end

        7'b1100011: begin // Branch (beq)
            branch = 1;
            immsrc = 3'b010; // B-type imm
            aluop  = 2'b01;
        end

        7'b1101111: begin // Jump (JAL)
            jump   = 1;
            rw     = 1;
            immsrc = 3'b011; // J-type imm
        end

        7'b1100111: begin // Jump (JALR)
            jump   = 1;
            rw     = 1;
            alusrc = 1;
            immsrc = 3'b000; // I-type imm
        end

        7'b0110111: begin // LUI
            rw     = 1;
            immsrc = 3'b100; // U-type imm
            aluop  = 2'b00;
        end

        default: begin
            branch = 0;
            jump   = 0;
            alusrc = 0;
            rw     = 0;
            mw     = 0;
            immsrc = 3'b000;
            aluop  = 2'b00;
        end
    endcase
end
endmodule